"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var TextDirectoryRepresentation = /** @class */ (function () {
    function TextDirectoryRepresentation(charset) {
        this.charset = charset;
    }
    TextDirectoryRepresentation.prototype.directoryNotEmpty = function (previousContent) {
        if (previousContent === void 0) { previousContent = ''; }
        var charset = this.charset;
        var final = charset.final, horizontalDiv = charset.horizontalDiv, notEmpty = charset.notEmpty, breakLine = charset.breakLine;
        return "".concat(previousContent).concat(final).concat(horizontalDiv).concat(horizontalDiv).concat(horizontalDiv).concat(notEmpty).concat(breakLine);
    };
    TextDirectoryRepresentation.prototype.previousContent = function (isLast) {
        var charset = this.charset;
        return "".concat(isLast ? ' ' : charset.verticalDiv, "   ");
    };
    TextDirectoryRepresentation.prototype.directoryItem = function (isLast, previousContent, itemName, isDirectory) {
        if (previousContent === void 0) { previousContent = ''; }
        if (itemName === void 0) { itemName = ''; }
        if (isDirectory === void 0) { isDirectory = false; }
        var charset = this.charset;
        var final = charset.final, horizontalDiv = charset.horizontalDiv, expand = charset.expand, breakLine = charset.breakLine, getFolderRepresentation = charset.getFolderRepresentation, getFileRepresentation = charset.getFileRepresentation;
        var linePrefix = isLast ? final : expand;
        var itemText = isDirectory
            ? getFolderRepresentation(itemName)
            : getFileRepresentation(itemName);
        var directoryItemRepresentation = "".concat(linePrefix).concat(horizontalDiv).concat(horizontalDiv).concat(horizontalDiv).concat(itemText);
        return "".concat(previousContent).concat(directoryItemRepresentation).concat(breakLine);
    };
    return TextDirectoryRepresentation;
}());
exports.default = TextDirectoryRepresentation;
