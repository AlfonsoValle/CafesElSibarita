"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var __1 = require("../");
function getSubdirectoriesMatchingFilters(directoryPath, currentLevel, filters, runningEnvironment) {
    return __awaiter(this, void 0, void 0, function () {
        var currentDirectoryContent, filteredResult;
        var _this = this;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, runningEnvironment.getDirectoryContent(directoryPath)];
                case 1:
                    currentDirectoryContent = _a.sent();
                    return [4 /*yield*/, Promise.all(currentDirectoryContent.map((function (directoryEntry) { return __awaiter(_this, void 0, void 0, function () {
                            var fullDirectoryEntryPath;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        fullDirectoryEntryPath = runningEnvironment.pathJoins(directoryPath, directoryEntry);
                                        return [4 /*yield*/, filters.matchFilters(fullDirectoryEntryPath, currentLevel)];
                                    case 1: return [2 /*return*/, _a.sent()];
                                }
                            });
                        }); })))];
                case 2:
                    filteredResult = _a.sent();
                    return [2 /*return*/, currentDirectoryContent.filter(function (_, index) { return filteredResult[index]; })];
            }
        });
    });
}
var isMaxLevelButDirectoryIsNotEmpty = function (maxLevel, currentLevel, subdirectories) { return maxLevel && maxLevel <= currentLevel && subdirectories.length > 0; };
var getChildrenFolders = function (children, directory, runningEnvironment) { return __awaiter(void 0, void 0, void 0, function () {
    var filteredResult;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, Promise.all(children.map(function (it) { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, runningEnvironment.isDirectory(runningEnvironment.pathJoins(directory, it))];
                        case 1: return [2 /*return*/, _a.sent()];
                    }
                }); }); }))];
            case 1:
                filteredResult = _a.sent();
                return [2 /*return*/, children.filter(function (_, index) { return filteredResult[index]; })];
        }
    });
}); };
var getChildrenFiles = function (children, directory, runningEnvironment) { return __awaiter(void 0, void 0, void 0, function () {
    var filteredResult;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, Promise.all(children.map(function (it) { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, runningEnvironment.isFile(runningEnvironment.pathJoins(directory, it))];
                        case 1: return [2 /*return*/, _a.sent()];
                    }
                }); }); }))];
            case 1:
                filteredResult = _a.sent();
                return [2 /*return*/, children.filter(function (_, index) { return filteredResult[index]; })];
        }
    });
}); };
var DirectoryParser = /** @class */ (function () {
    function DirectoryParser(directoryPath, filters, runningEnvironment, maxLevel, markNoEmptyDirectories) {
        if (maxLevel === void 0) { maxLevel = null; }
        if (markNoEmptyDirectories === void 0) { markNoEmptyDirectories = true; }
        this.directoryPath = directoryPath;
        this.filters = filters;
        this.maxLevel = maxLevel;
        this.markNoEmptyDirectories = markNoEmptyDirectories;
        this.runningEnvironment = runningEnvironment;
    }
    DirectoryParser.prototype.parse = function () {
        return __awaiter(this, void 0, void 0, function () {
            var root;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        root = new __1.DirectoryNode();
                        return [4 /*yield*/, this.includeChildrenFromDirectories(root, this.directoryPath, 0)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, root];
                }
            });
        });
    };
    DirectoryParser.prototype.includeChildrenFromDirectories = function (parent, currentDirectory, currentLevel) {
        return __awaiter(this, void 0, void 0, function () {
            var subdirectories, childrenDirectories, childrenFiles, getChildrenDirectoryNodes, getChildrenFileNodes, _a, _b;
            var _this = this;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0: return [4 /*yield*/, getSubdirectoriesMatchingFilters(currentDirectory, currentLevel, this.filters, this.runningEnvironment)];
                    case 1:
                        subdirectories = _c.sent();
                        if (isMaxLevelButDirectoryIsNotEmpty(this.maxLevel, currentLevel, subdirectories)) {
                            if (this.markNoEmptyDirectories) {
                                parent.markDirectoryAsNoEmpty();
                            }
                            return [2 /*return*/];
                        }
                        return [4 /*yield*/, getChildrenFolders(subdirectories, currentDirectory, this.runningEnvironment)];
                    case 2:
                        childrenDirectories = _c.sent();
                        return [4 /*yield*/, getChildrenFiles(subdirectories, currentDirectory, this.runningEnvironment)];
                    case 3:
                        childrenFiles = _c.sent();
                        getChildrenDirectoryNodes = function () { return __awaiter(_this, void 0, void 0, function () {
                            var _this = this;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, Promise.all(childrenDirectories.map(function (childDirectory) { return __awaiter(_this, void 0, void 0, function () {
                                            var newNodeItem;
                                            return __generator(this, function (_a) {
                                                switch (_a.label) {
                                                    case 0:
                                                        newNodeItem = __1.DirectoryNode.createDirectory(childDirectory, currentLevel + 1);
                                                        return [4 /*yield*/, this.includeChildrenFromDirectories(newNodeItem, this.runningEnvironment.pathJoins(currentDirectory, childDirectory), currentLevel + 1)];
                                                    case 1:
                                                        _a.sent();
                                                        return [2 /*return*/, newNodeItem];
                                                }
                                            });
                                        }); }))];
                                    case 1: return [2 /*return*/, _a.sent()];
                                }
                            });
                        }); };
                        getChildrenFileNodes = function () {
                            return childrenFiles.map(function (childFile) { return __1.DirectoryNode.createFile(childFile, currentLevel + 1); });
                        };
                        _b = (_a = parent).addChildren;
                        return [4 /*yield*/, getChildrenDirectoryNodes()];
                    case 4:
                        _b.apply(_a, [_c.sent()]);
                        parent.addChildren(getChildrenFileNodes());
                        return [2 /*return*/];
                }
            });
        });
    };
    return DirectoryParser;
}());
exports.default = DirectoryParser;
