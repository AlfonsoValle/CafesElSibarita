"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
var DirectoryNodeTypes_1 = require("./DirectoryNodeTypes");
var DirectoryNode = /** @class */ (function () {
    function DirectoryNode(name, deep, kind, children, directoryEmpty) {
        if (name === void 0) { name = DirectoryNode.ROOT_NAME; }
        if (deep === void 0) { deep = 0; }
        if (kind === void 0) { kind = DirectoryNodeTypes_1.default.DIRECTORY_TYPE; }
        if (children === void 0) { children = []; }
        if (directoryEmpty === void 0) { directoryEmpty = true; }
        this.name = name;
        this.deep = deep;
        this.kind = kind;
        this.children = children;
        this.directoryEmpty = directoryEmpty;
        this.directoryIndex = DirectoryNode.ROOT_DIRECTORY_INDEX;
    }
    DirectoryNode.createDirectory = function (name, deep, children) {
        if (children === void 0) { children = []; }
        return new DirectoryNode(name, deep, DirectoryNodeTypes_1.default.DIRECTORY_TYPE, children);
    };
    DirectoryNode.createFile = function (name, deep) {
        return new DirectoryNode(name, deep, DirectoryNodeTypes_1.default.FILE_TYPE);
    };
    DirectoryNode.prototype.isLeaf = function () {
        return this.children.length === 0;
    };
    DirectoryNode.prototype.isDirectoryEmpty = function () {
        return this.directoryEmpty;
    };
    DirectoryNode.prototype.isLeafNotEmpty = function () {
        return this.isLeaf() && !this.isDirectoryEmpty();
    };
    DirectoryNode.prototype.markDirectoryAsNoEmpty = function () {
        this.directoryEmpty = false;
    };
    DirectoryNode.prototype.isRoot = function () {
        return this.name === DirectoryNode.ROOT_NAME;
    };
    DirectoryNode.prototype.isFile = function () {
        return this.kind === DirectoryNodeTypes_1.default.FILE_TYPE;
    };
    DirectoryNode.prototype.isDirectory = function () {
        return this.kind === DirectoryNodeTypes_1.default.DIRECTORY_TYPE;
    };
    DirectoryNode.prototype.addChildren = function (newChildren) {
        if (newChildren === void 0) { newChildren = []; }
        this.children = __spreadArray(__spreadArray([], this.children, true), newChildren, true);
        this.childrenIndexes = null;
    };
    DirectoryNode.prototype.setDirectoryIndex = function (directoryIndex) {
        this.directoryIndex = directoryIndex;
    };
    DirectoryNode.prototype.isLastChild = function (child) {
        var childrenIndexes = this.getChildrenIndexes();
        var lastIndex = this.children.length - 1;
        return childrenIndexes[child.getHashCode()] === lastIndex;
    };
    DirectoryNode.prototype.getChildrenIndexes = function () {
        if (!this.childrenIndexes) {
            this.childrenIndexes = this.children.reduce(function (prev, current, index) {
                var _a;
                return (__assign(__assign({}, prev), (_a = {}, _a[current.getHashCode()] = index, _a)));
            }, {});
        }
        return this.childrenIndexes;
    };
    DirectoryNode.prototype.getHashCode = function () {
        return this.name;
    };
    DirectoryNode.ROOT_NAME = 'root';
    DirectoryNode.ROOT_DIRECTORY_INDEX = -1;
    return DirectoryNode;
}());
exports.default = DirectoryNode;
