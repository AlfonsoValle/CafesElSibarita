"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var FilterCollection_1 = require("./FilterCollection");
var FilterGitignore_1 = require("../FilterGitignore");
var FilterIgnore_1 = require("../FilterIgnore");
var FilterOnly_1 = require("../FilterOnly");
var CustomFilterCollection = /** @class */ (function (_super) {
    __extends(CustomFilterCollection, _super);
    function CustomFilterCollection(runningEnvironment, ignoreItems, onlyItems, useGitignore, absolutePath) {
        if (ignoreItems === void 0) { ignoreItems = []; }
        if (onlyItems === void 0) { onlyItems = []; }
        if (useGitignore === void 0) { useGitignore = false; }
        if (absolutePath === void 0) { absolutePath = ''; }
        var _this = _super.call(this) || this;
        _this.addIgnoreFilter(runningEnvironment, ignoreItems);
        _this.addOnlyFilter(runningEnvironment, onlyItems);
        _this.addGitignoreFilter(runningEnvironment, useGitignore, absolutePath);
        return _this;
    }
    CustomFilterCollection.prototype.addGitignoreFilter = function (runningEnvironment, useGitignore, absolutePath) {
        if (useGitignore === void 0) { useGitignore = false; }
        if (absolutePath === void 0) { absolutePath = ''; }
        this.addFilter(new FilterGitignore_1.default(useGitignore, absolutePath, runningEnvironment));
    };
    CustomFilterCollection.prototype.addIgnoreFilter = function (runningEnvironment, configurationItems) {
        if (configurationItems === void 0) { configurationItems = []; }
        this.addFilter(new FilterIgnore_1.default(runningEnvironment, configurationItems));
    };
    CustomFilterCollection.prototype.addOnlyFilter = function (runningEnvironment, configurationItems) {
        if (configurationItems === void 0) { configurationItems = []; }
        this.addFilter(new FilterOnly_1.default(runningEnvironment, configurationItems));
    };
    return CustomFilterCollection;
}(FilterCollection_1.default));
exports.default = CustomFilterCollection;
