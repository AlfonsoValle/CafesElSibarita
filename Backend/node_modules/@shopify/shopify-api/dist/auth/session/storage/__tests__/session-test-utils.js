"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.sessionArraysEqual = void 0;
var tslib_1 = require("tslib");
var session_utils_1 = require("../../session-utils");
// compare two arrays of sessions that should contain
// the same sessions but may be in a different order
function sessionArraysEqual(sessionArray1, sessionArray2) {
    var e_1, _a, e_2, _b;
    if (sessionArray1.length !== sessionArray2.length) {
        return false;
    }
    try {
        for (var sessionArray1_1 = tslib_1.__values(sessionArray1), sessionArray1_1_1 = sessionArray1_1.next(); !sessionArray1_1_1.done; sessionArray1_1_1 = sessionArray1_1.next()) {
            var session1 = sessionArray1_1_1.value;
            var found = false;
            try {
                for (var sessionArray2_1 = (e_2 = void 0, tslib_1.__values(sessionArray2)), sessionArray2_1_1 = sessionArray2_1.next(); !sessionArray2_1_1.done; sessionArray2_1_1 = sessionArray2_1.next()) {
                    var session2 = sessionArray2_1_1.value;
                    if ((0, session_utils_1.sessionEqual)(session1, session2)) {
                        found = true;
                        continue;
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (sessionArray2_1_1 && !sessionArray2_1_1.done && (_b = sessionArray2_1.return)) _b.call(sessionArray2_1);
                }
                finally { if (e_2) throw e_2.error; }
            }
            if (!found)
                return false;
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (sessionArray1_1_1 && !sessionArray1_1_1.done && (_a = sessionArray1_1.return)) _a.call(sessionArray1_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return true;
}
exports.sessionArraysEqual = sessionArraysEqual;
